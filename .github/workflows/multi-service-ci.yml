#name: Smart Bank System - CI Pipeline
#
#on:
#  push:
#    branches: [main]
#  pull_request:
#    branches: [main]
#
#jobs:
#  build-card-service:
#    name: Build Card Service (Node + Mongo)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./card-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - run: npm install
#      - run: npm run build
#      - run: docker build -t card-service .
#
#  build-user-service:
#    name: Build User Service (Node)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./user-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - run: npm install
#      # - run: npm run build
#      - run: docker build -t user-service .
#
#  build-test-node:
#    name: Build Test Node Service
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./test-node
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - run: npm install
#      - run: npm run build
#      - run: docker build -t test-node .
#
#  build-discovery-service:
#    name: Build Discovery Service (Spring Boot)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./discovery-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - run: mvn clean package
#      - run: docker build -t discovery-service .
#
#  build-gateway-service:
#    name: Build Gateway Service (Spring Boot)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./gateway-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - run: mvn clean package
#      - run: docker build -t gateway-service .
#
#  build-account-service:
#    name: Build Account Service (Spring Boot)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./account-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - run: mvn clean package
#      - run: docker build -t account-service .
#
#  build-transaction-service:
#    name: Build Transaction Service (Node or Java)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./transaction-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - run: npm install
#      # - run: npm run build
#      - run: docker build -t transaction-service .
#
#  build-config-service:
#    name: Build Config Service (Spring Boot)
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./config-service
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - run: mvn clean package
#      - run: docker build -t config-service .


name: Smart Banking CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4                                                      # :contentReference[oaicite:0]{index=0}

      - name: Set up JDK 17 with Maven cache
        uses: actions/setup-java@v4                                                      # :contentReference[oaicite:1]{index=1}
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build & install all modules (incl. build-image)
        env:
          DOCKER_HOST: unix:///var/run/docker.sock                                      # :contentReference[oaicite:2]{index=2}
          DOCKER_TLS_VERIFY: ''                                                          # optional—empty when using Unix socket
          DOCKER_CERT_PATH: ''                                                           # optional—empty when using Unix socket
        run: mvn --batch-mode clean install -Pbuild-image -DskipTests                    # :contentReference[oaicite:3]{index=3}

      - name: Build Docker images for each service
        run: |
          # Spring Boot services (use Dockerfile in each folder)
          docker build -t banking/config-service:${{ github.sha }} config-service       # :contentReference[oaicite:4]{index=4}
          docker build -t banking/discovery-service:${{ github.sha }} discovery-service
          docker build -t banking/gateway-service:${{ github.sha }} gateway-service
          docker build -t banking/account-service:${{ github.sha }} account-service

          # Node.js services
          docker build -t banking/test-node:${{ github.sha }} test-node
          docker build -t banking/user-service:${{ github.sha }} user-service
          docker build -t banking/card-service:${{ github.sha }} card-service
          docker build -t banking/transaction-service:${{ github.sha }} transaction-service

      - name: Start all services via Docker Compose
        uses: hoverkraft-tech/compose-action@v2                                       # :contentReference[oaicite:5]{index=5}
        with:
          compose-file: docker-compose.yml
          up-flags: '-d --build'                                                        # build images if anything changed
          services: |
            config-service
            discovery-service
            gateway-service
            account-service
            test-node
            user-service
            card-service
            transaction-service

      # (Optional) Add smoke tests or integration checks here
      #- name: Health check services
      #  run: |
      #    curl --fail http://localhost:8761/eureka/apps
      #    curl --fail http://localhost:8088/actuator/health

      # Docker Compose will automatically be torn down at the end of the job